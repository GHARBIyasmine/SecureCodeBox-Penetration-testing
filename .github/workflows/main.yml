name: SecureCodeBox Penetration Tests

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  penetration-tests:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Set up Kubernetes Kind cluster
      - name: Set up kind cluster
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: "v0.17.0"

      # Step 2: Configure kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.27.1

      # Step 3: Install Helm for SecureCodeBox operator installation
      - name: Install Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.8.0

      # Step 4: Deploy SecureCodeBox Operator using Helm from the OCI registry
      - name: Deploy SecureCodeBox
        run: |
          helm --namespace securecodebox-system upgrade --install --create-namespace securecodebox-operator oci://ghcr.io/securecodebox/helm/operator

    # Step 5: Deploy Juice-Shop demo target
      - name: Deploy Juice-Shop Demo Target
        run: |
          helm upgrade --install juice-shop oci://ghcr.io/securecodebox/helm/juice-shop 

      # Step 6: Deploy ZAP-Advanced scanner
      - name: Deploy ZAP-Advanced Scanner
        run: |
          helm upgrade --install zap-advanced oci://ghcr.io/securecodebox/helm/zap-advanced 

      # Step 7: Initiate ZAP Scan on the Juice-Shop target
      - name: Download scan.yaml
        run: |
          curl -O https://raw.githubusercontent.com/GHARBIyasmine/SecureCodeBox-Penetration-testing/main/scan.yaml

      - name: Apply scan.yaml
        run: kubectl apply -f scan.yaml

      # Step 8: Wait for ZAP Scan Completion
      - name: Wait for ZAP Scan Results
        run: |
          # Start watch mode for kubectl get scan
          #kubectl get scan zap-authenticated-full-scan-juiceshop -o wide --watch &
          #kubectl wait --for=condition=Done scan/zap-authenticated-full-scan-juiceshop --timeout=1800s
          # Continuously check scan status and print it
          # Poll for the scan state to become "Done"
          while true; do
            # Fetch the scan status and check for "Done" state
            scan_state=$(kubectl get scan zap-authenticated-full-scan-juiceshop -o=jsonpath='{.status.state}')
      
            # Print the current scan state for debugging
            echo "Current scan state: $scan_state"
      
            # Break out of loop if scan is done
            if [[ "$scan_state" == "Done" ]]; then
              echo "Scan completed!"
              break
            fi
      
            # Wait 30 seconds before checking again
            sleep 30
          done

      # Step 9: Retrieve and save the ZAP scan results
      - name: Retrieve ZAP Scan Results
        run: |
          kubectl port-forward -n securecodebox-system service/securecodebox-operator-minio 9000:9000 &
      
          # Give it a few seconds to ensure the port-forwarding is active
          sleep 5
          
          # download the minio client 
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          sudo mv mc /usr/local/bin

          # set up minio client 
          mc alias set local http://localhost:9000 admin password
          
          # Extract the scan uid from the scan
          scan_uid=$(kubectl get scan zap-authenticated-full-scan-juiceshop -o=jsonpath='{.metadata.uid}')
          # Extract scan name 
          scan_name=$(kubectl get scan zap-authenticated-full-scan-juiceshop -o=jsonpath='{.metadata.name}')
          # Extract scan findings 
          scan_findings_categories=$(kubectl get scan zap-authenticated-full-scan-juiceshop -o=jsonpath='{.status.findings.categories}')
          scan_findings_categories=$(echo "$scan_findings_categories" | tr -d '\n')

          # Extract count 
          scan_findings_count=$(kubectl get scan zap-authenticated-full-scan-juiceshop -o=jsonpath='{.status.findings.count}')
          scan_findings_count=$(echo "$scan_findings_count" | tr -d '\n')

          echo "Categories: ${scan_findings_categories}"
          echo "Count: ${scan_findings_count}"

          summary_file="report-summary-${scan_uid}.json"
          echo "{
            \"scan_name\": \"${scan_name}\",
            \"scan_uid\": \"${scan_uid}\",
            \"findings\": {
              \"count\": ${scan_findings_count},
              \"categories\": ${scan_findings_categories}
              
            }
          }" > ${summary_file}
      
          echo "Report created: ${summary_file}"

          # # Replace the service hostname with 'localhost' in the finding link
          # updated_link=$(echo "$finding_link" | sed 's|securecodebox-operator-minio.securecodebox-system.svc.cluster.local|localhost|')
      
          # # Debug: Print the updated finding link
          # echo "Updated Finding Link: $updated_link"
      
          # Use the updated link to download the findings
          mc cp local/securecodebox/scan-${scan_uid}/findings.json findings.json

      - name: Upload findings.json and report-summary artifacts
        uses: actions/upload-artifact@v3
        with:
          name: findings-and-reports
          path: |
            findings.json
            report-summary-*.json

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Commit and push files
        run: |
          git add findings.json report-summary-*.json
          git commit -m "Add findings and report summaries [skip ci]" || echo "No changes to commit"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
